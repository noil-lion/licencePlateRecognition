import cv2
import numpy as np
import ply


def split(char):
    char_clct = []
    char_crct = []
    for i in range(6):
        for k in range(6):
            char_clct.append(char[k*8:(k+1)*8, i*4:(i+1)*4])
    '''print(len(char_clct))
    for p in range(len(char_clct)):
        name = 'char{batch}'.format(batch=p)
        cv2.imshow(name, char_clct[p])
    cv2.waitKey()'''
    for p in range(len(char_clct)):
        char_crct.append(get_TD(char_clct[p]))  # 获取当前图像的特征向量
    return char_crct


def get_TD(part):
    """ part1 = cv2.cvtColor(part1, cv2.COLOR_RGB2GRAY)
    ret, part = cv2.threshold(part1, 0, 255, cv2.THRESH_OTSU)"""
    p_height = part.shape[0]
    p_width = part.shape[1]
    white_sum = 0
    for i in range(p_height):
        for k in range(p_width):
            white_sum = white_sum + part[i][k]
    white_con = round(white_sum/(p_height*p_width)/255*10)
    return white_con


def platenum_identification(char_list, k):
    # 基于模板匹配的字符识别基于模板匹配的字符识别算法的主要思想是将分割完成的车辆牌照图像与模板库中的字符比较，采用相似度函数求出两种字符之间的相似度，取出使相似度函数最大的字符就是正确的匹配结果。
    print("这里是车牌字符识别")
    # 模板特征库
    clist = np.array(char_list)
    bf_dis = 0
    num = []
    num_std = [
        {0: [0.0, 8.0, 10.0, 10.0, 8.0, 0.0, 3.0, 8.0, 7.0, 8.0, 10.0, 3.0, 5.0, 2.0, 0.0, 0.0, 4.0, 5.0, 5.0, 2.0, 0.0, 0.0, 4.0, 5.0, 3.0, 8.0, 7.0, 7.0, 9.0, 3.0, 0.0, 9.0, 10.0, 10.0, 9.0, 0.0]},
        {1: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.0, 5.0, 5.0, 5.0, 5.0, 0.0, 4.0, 9.0, 9.0, 9.0, 9.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]},
        {2: [0.0, 8.0, 0.0, 0.0, 5.0, 3.0, 2.0, 7.0, 0.0, 2.0, 10.0, 4.0, 2.0, 4.0, 0.0, 8.0, 7.0, 4.0, 2.0, 4.0, 4.0, 8.0, 3.0, 5.0, 1.0, 10.0, 10.0, 2.0, 3.0, 5.0, 0.0, 6.0, 5.0, 0.0, 2.0, 4.0]},
        {3: [2.0, 1.0, 0.0, 0.0, 8.0, 2.0, 3.0, 3.0, 3.0, 0.0, 5.0, 4.0, 4.0, 4.0, 9.0, 0.0, 1.0, 4.0, 4.0, 9.0, 10.0, 2.0, 1.0, 4.0, 4.0, 9.0, 5.0, 8.0, 8.0, 4.0, 3.0, 4.0, 1.0, 9.0, 9.0, 1.0]},
        {5: [4.0, 10.0, 9.0, 1.0, 4.0, 0.0, 4.0, 7.0, 9.0, 2.0, 10.0, 0.0, 4.0, 2.0, 7.0, 0.0, 5.0, 2.0, 4.0, 3.0, 7.0, 0.0, 4.0, 2.0, 4.0, 3.0, 6.0, 7.0, 8.0, 1.0, 2.0, 1.0, 2.0, 10.0, 8.0, 0.0]},
        {6: [0.0, 0.0, 4.0, 10.0, 8.0, 0.0, 0.0, 4.0, 10.0, 7.0, 8.0, 3.0, 1.0, 8.0, 6.0, 3.0, 3.0, 5.0, 3.0, 5.0, 3.0, 3.0, 2.0, 5.0, 2.0, 1.0, 2.0, 8.0, 7.0, 3.0, 0.0, 0.0, 0.0, 7.0, 8.0, 0.0]},
        {7: [2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 5.0, 4.0, 0.0, 0.0, 0.0, 0.0, 5.0, 3.0, 0.0, 1.0, 8.0, 4.0, 5.0, 2.0, 6.0, 15.0, 12.0, 4.0, 5.0, 10.0, 11.0, 3.0, 0.0, 0.0, 3.0, 10.0, 0.0, 0.0, 0.0, 0.0]},
        {8: [0.0, 6.0, 3.0, 7.0, 5.0, 0.0, 4.0, 10.0, 10.0, 10.0, 10.0, 1.0, 5.0, 5.0, 9.0, 3.0, 7.0, 2.0, 5.0, 1.0, 8.0, 1.0, 6.0, 2.0, 5.0, 9.0, 10.0, 8.0, 9.0, 0.0, 1.0, 10.0, 6.0, 10.0, 5.0, 0.0]},
        {9: [0.0, 8.0, 4.0, 0.0, 0.0, 0.0, 3.0, 9.0, 9.0, 0.0, 1.0, 0.0, 5.0, 2.0, 6.0, 2.0, 8.0, 1.0, 5.0, 2.0, 5.0, 6.0, 8.0, 0.0, 3.0, 8.0, 9.0, 10.0, 2.0, 0.0, 0.0, 6.0, 9.0, 3.0, 0.0, 0.0]},
        {"A": [0.0, 0.0, 0.1, 1.6, 6.2, 3.2, 0.2, 4.6, 7.7, 10.0, 9.9, 3.4, 3.4, 10.0, 9.7, 6.0, 7.5, 0.0, 2.1, 8.8, 9.7, 7.7, 7.5, 0.0, 0.0, 1.8, 4.6, 9.6, 9.9, 3.4, 0.0, 0.0, 0.0, 0.7, 6.3, 2.4]},
        {"B": [1.0, 4.0, 4.0, 4.0, 4.0, 1.0, 2.0, 10.0, 10.0, 10.0, 10.0, 5.0, 2.0, 5.0, 5.0, 2.0, 2.0, 5.0, 1.0, 7.0, 8.0, 6.0, 5.0, 5.0, 0.0, 6.0, 8.0, 9.0, 10.0, 2.0, 0.0, 0.0, 1.0, 1.0, 2.0, 0.0]},
        {"C": [0.0, 7.0, 8.0, 6.0, 6.0, 0.0, 2.0, 7.0, 4.0, 4.0, 6.0, 4.0, 4.0, 2.0, 0.0, 0.0, 0.0, 4.0, 4.0, 2.0, 0.0, 0.0, 0.0, 4.0, 2.0, 5.0, 0.0, 0.0, 3.0, 4.0, 0.0, 7.0, 0.0, 1.0, 9.0, 1.0]},
        {"D": [1.0, 2.0, 2.0, 4.0, 5.0, 2.0, 4.0, 10.0, 10.0, 10.0, 9.0, 4.0, 4.0, 3.0, 0.0, 0.0, 3.0, 4.0, 4.0, 3.0, 0.0, 2.0, 6.0, 4.0, 3.0, 10.0, 10.0, 10.0, 10.0, 1.0, 0.0, 3.0, 2.0, 2.0, 1.0, 0.0]},
        {"E": [2.0, 3.0, 3.0, 3.0, 3.0, 2.0, 8.0, 9.0, 12.0, 9.0, 9.0, 8.0, 8.0, 0.0, 6.0, 1.0, 0.0, 7.0, 8.0, 0.0, 7.0, 1.0, 0.0, 8.0, 8.0, 0.0, 5.0, 0.0, 0.0, 8.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0]},
        {"F": [2.0, 7.0, 6.0, 4.0, 4.0, 2.0, 4.0, 9.0, 9.0, 10.0, 10.0, 4.0, 4.0, 2.0, 4.0, 5.0, 1.0, 0.0, 4.0, 2.0, 4.0, 4.0, 0.0, 0.0, 4.0, 2.0, 3.0, 4.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0]},
        {"L": [3.0, 10.0, 10.0, 10.0, 10.0, 3.0, 2.0, 9.0, 9.0, 9.0, 10.0, 5.0, 0.0, 0.0, 0.0, 0.0, 4.0, 5.0, 0.0, 0.0, 0.0, 0.0, 3.0, 5.0, 0.0, 0.0, 0.0, 0.0, 3.0, 5.0, 0.0, 0.0, 0.0, 0.0, 3.0, 3.0]},
        {"V": [4.0, 7.0, 2.0, 0.0, 0.0, 0.0, 2.0, 10.0, 10.0, 6.0, 2.0, 0.0, 0.0, 1.0, 5.0, 10.0, 10.0, 3.0, 0.0, 1.0, 4.0, 10.0, 10.0, 4.0, 3.0, 9.0, 10.0, 9.0, 5.0, 1.0, 4.0, 7.0, 4.0, 0.0, 0.0, 0.0]},
        {"T": [3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 2.0, 1.0, 1.0, 1.0, 0.0, 5.0, 9.0, 9.0, 10.0, 10.0, 5.0, 5.0, 6.0, 5.0, 5.0, 5.0, 2.0, 5.0, 2.0, 0.0, 0.0, 0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0]},
        {"J": [0.0, 0.0, 0.0, 0.0, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 2.0, 0.0, 0.0, 0.0, 0.0, 2.0, 4.0, 0.0, 0.0, 0.0, 0.0, 2.0, 4.0, 1.0, 4.0, 4.0, 4.0, 7.0, 2.0, 4.0, 10.0, 10.0, 10.0, 7.0, 0.0]},
        {"M": [3.0, 7.0, 7.0, 7.0, 7.0, 1.0, 3.0, 10.0, 9.0, 8.0, 9.0, 3.0, 0.0, 6.0, 6.0, 0.0, 0.0, 0.0, 0.0, 7.0, 7.0, 0.0, 0.0, 0.0, 3.0, 10.0, 9.0, 6.0, 5.0, 1.0, 1.0, 7.0, 7.0, 10.0, 10.0, 3.0]},
        {"N": [3.0, 7.0, 6.0, 6.0, 10.0, 4.0, 2.0, 9.0, 7.0, 4.0, 4.0, 1.0, 0.0, 3.0, 9.0, 2.0, 0.0, 0.0, 0.0, 0.0, 3.0, 9.0, 3.0, 0.0, 0.0, 1.0, 1.0, 5.0, 9.0, 3.0, 4.0, 10.0, 10.0, 10.0, 10.0, 4.0]},
        {"Y": [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 3.0, 1.0, 0.0, 0.0, 0.0, 1.0, 3.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]},
        {"Z": [3.0, 4.0, 2.0, 0.0, 6.0, 2.0, 5.0, 3.0, 1.0, 7.0, 10.0, 4.0, 5.0, 2.0, 8.0, 10.0, 7.0, 5.0, 5.0, 9.0, 10.0, 3.0, 3.0, 5.0, 5.0, 9.0, 2.0, 0.0, 3.0, 5.0, 2.0, 1.0, 0.0, 0.0, 1.0, 2.0]}
        ]
    char_std = [
        {"赣": [3.0, 6.0, 6.0, 7.0, 2.0, 0.0, 2.0, 5.0, 6.0, 9.0, 9.0, 1.0, 1.0, 3.0, 2.0, 2.0, 1.0, 0.0, 3.0, 9.0, 6.0, 5.0, 5.0, 1.0, 2.0, 10.0, 8.0, 6.0, 5.0, 0.0, 1.0, 2.0, 3.0, 5.0, 2.0, 2.0]},
        {"苏": [0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 1.0, 11.0, 5.0, 6.0, 6.0, 2.0, 1.0, 11.0, 11.0, 14.0, 9.0, 1.0, 1.0, 9.0, 11.0, 14.0, 1.0, 3.0, 1.0, 13.0, 5.0, 14.0, 12.0, 1.0, 0.0, 4.0, 0.0, 6.0, 2.0, 0.0]},
        {"粤": [0.0, 3.0, 3.0, 2.0, 1.0, 0.0, 1.0, 9.0, 9.0, 9.0, 7.0, 0.0, 4.0, 9.0, 9.0, 9.0, 10.0, 3.0, 1.0, 10.0, 10.0, 9.0, 10.0, 5.0, 1.0, 10.0, 10.0, 10.0, 10.0, 3.0, 0.0, 3.0, 3.0, 2.0, 1.0, 0.0]},
        {"沪": [1.0, 1.0, 2.0, 1.0, 6.0, 2.0, 0.0, 2.0, 2.0, 5.0, 3.0, 1.0, 0.0, 3.0, 7.0, 7.0, 7.0, 3.0, 3.0, 6.0, 3.0, 6.0, 1.0, 0.0, 0.0, 6.0, 0.0, 4.0, 0.0, 0.0, 0.0, 3.0, 7.0, 5.0, 0.0, 0.0]},
        {"鄂": [3.0, 3.0, 2.0, 1.0, 0.0, 0.0, 5.0, 7.0, 8.0, 7.0, 0.0, 1.0, 5.0, 7.0, 7.0, 7.0, 7.0, 2.0, 4.0, 6.0, 6.0, 4.0, 2.0, 0.0, 5.0, 8.0, 8.0, 7.0, 7.0, 1.0, 1.0, 2.0, 3.0, 5.0, 4.0, 0.0]}
    ]
    if k != 0:
        for i in num_std:
            for key, value in i.items():
                val = np.array(value)
                psn = ply.calcPearson(clist, val)
                dis = psn
                if bf_dis < dis:
                    bf_dis = dis
                    index = i
    else:
        for i in char_std:
            for key, value in i.items():
                val = np.array(value)
                psn = ply.calcPearson(clist, val)
                dis = psn
                if bf_dis < dis:
                    bf_dis = dis
                    index = i
    # 提取特征值
    for i in index.keys():
        if i == 0 or i == 8 or i == "B":
            if abs(clist[0] - clist[35]) <= 1 and clist[15] != 0:
                i = 8
            if abs(clist[0] - clist[35]) > 1 and clist[15] != 0:
                i = "B"
            if abs(clist[0] - clist[35]) < 1 and clist[15] == 0:
                i = 0
        print(i)
        num.append(i)
    return num


def idf(char_list):
    num = []
    for i in range(len(char_list)):
        if i < 7:
            # name = 'char{batch}'.format(batch=i)
            # cv2.imshow(name, char_list[i])
            img = cv2.resize(char_list[i], (24, 48), interpolation=cv2.INTER_AREA)
            char_clct = split(img)
            print(char_clct)
            num.append(platenum_identification(char_clct, i))
    return num
